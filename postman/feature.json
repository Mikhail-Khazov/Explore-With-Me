{
	"info": {
		"_postman_id": "f3eb6ecc-eaa5-44e8-a6f8-783f884816f3",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24115227"
	},
	"item": [
		{
			"name": "New comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, author, createdOn\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('author');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать отправленному в запросе');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let comment;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        comment =  await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"        pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(comment),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{uid}}/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid}}",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail create comment when event not published",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let comment;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id)); \r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        comment = rnd.getComment();\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"        pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(comment),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{uid}}/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid}}",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update comment by user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, author, createdOn\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('author');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать отправленному в запросе');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let comment;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        comment =  await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"        pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(comment),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{uid}}/comments/{{cid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid}}",
						"comments",
						"{{cid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail update comment when user not owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let comment;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid1\", user1.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        comment =  await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"        pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(comment),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{cid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid1}}",
						"comments",
						"{{cid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comment by user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, author, createdOn\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('author');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).to.be.a(\"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{uid}}/comments?from=0&size=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid}}",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments by user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							"const target1 = pm.response.json()[1];\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, author, createdOn\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('author');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Второй омментарий должен содержать поля: id, text, author, createdOn\", function () {\r",
							"pm.expect(target1).to.have.property('id');\r",
							"pm.expect(target1).to.have.property('text');\r",
							"pm.expect(target1).to.have.property('event');\r",
							"pm.expect(target1).to.have.property('author');\r",
							"pm.expect(target1).to.have.property('createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе по первому комментарию должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе по второму комментарию должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target1.id).to.not.be.null;\r",
							"    pm.expect(target1.text).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарии должны принадлежать к одному пользователю\", function() {\r",
							"        pm.expect(target1.id).to.be.above(target.id);\r",
							"        pm.expect(target.author.id).to.be.equal(target1.author.id);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"        const comment1 = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid1\", comment1.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{uid}}/comments?from=0&size=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid}}",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments by event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							"const target1 = pm.response.json()[1];\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, author, createdOn\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('author');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Второй комментарий должен содержать поля: id, text, author, createdOn\", function () {\r",
							"pm.expect(target1).to.have.property('id');\r",
							"pm.expect(target1).to.have.property('text');\r",
							"pm.expect(target1).to.have.property('event');\r",
							"pm.expect(target1).to.have.property('author');\r",
							"pm.expect(target1).to.have.property('createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе по первому комментарию должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе по второму комментарию должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target1.id).to.not.be.null;\r",
							"    pm.expect(target1.text).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарии должны принадлежать к одному событию\", function() {\r",
							"        pm.expect(target1.id).to.be.not.equal(target.id);\r",
							"        pm.expect(target.event.id).to.be.equal(target1.event.id);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid1\", user1.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"        const comment1 = await api.addComment(user1.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid1\", comment1.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/event/{{eid}}/comments?from=0&size=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"event",
						"{{eid}}",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail get comments when event not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id + 1)\r",
							"        api.addComment(user.id, event.id, rnd.getComment());\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/event/{{eid}}/comments?from=0&size=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"event",
						"{{eid}}",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments by all admin params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const target = pm.response.json()[0];\r",
							"const target1 = pm.response.json()[1];\r",
							"const target2 = pm.response.json()[2];\r",
							"\r",
							"pm.test(\"Комментарии должены содержать поля: id, text, author, createdOn\", function () {\r",
							"    response.forEach(item => {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('text');\r",
							"        pm.expect(item).to.have.property('event');\r",
							"        pm.expect(item).to.have.property('author');\r",
							"        pm.expect(item).to.have.property('createdOn');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе по первому комментарию должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе по второму комментарию должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target1.id).to.not.be.null;\r",
							"    pm.expect(target1.text).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе по третьему комментарию должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target2.id).to.not.be.null;\r",
							"    pm.expect(target2.text).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарии не должны принадлежать к одному событию\", function() {\r",
							"        pm.expect(target1.event.id).to.be.not.equal(target.event.id).and.not.equal(target2.event.id);\r",
							"})\r",
							"\r",
							"pm.test(\"Комментарии не должны принадлежать одному пользователю\", function() {\r",
							"        pm.expect(target.author.ai).to.be.not.equal(target1.author.id).and.not.equal(target2.author.id);\r",
							"})\r",
							"\r",
							"pm.test(\"Комментарии найденный по id должен иметь уникальные поля author_id и event_id\", function() {\r",
							"        pm.expect(target2.author.ai).to.be.not.equal(target1.author.id).and.not.equal(target.author.id);\r",
							"        pm.expect(target2.event.id).to.be.not.equal(target1.event.id).and.not.equal(target.event.id);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid1\", user1.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid2\", user2.id)\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        let event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
							"        event1 = await api.publishEvent(event1.id);\r",
							"        pm.collectionVariables.set(\"eid1\", event1.id)\r",
							"        let event2 = await api.addEvent(user2.id, rnd.getEvent(category.id));\r",
							"        event2 = await api.publishEvent(event2.id);\r",
							"        pm.collectionVariables.set(\"eid2\", event2.id)\r",
							"       \r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"        const comment1 = await api.addComment(user1.id, event1.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid1\", comment1.id)\r",
							"        const comment2 = await api.addComment(user2.id, event2.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid2\", comment2.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments?authorId={{uid}}&eventId={{eid1}}&commentId={{cid2}}&from=0&size=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "authorId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid1}}"
						},
						{
							"key": "commentId",
							"value": "{{cid2}}"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments by admin by list of ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарии должены содержать поля: id, text, author, createdOn\", function () {\r",
							"    response.forEach(item => {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('text');\r",
							"        pm.expect(item).to.have.property('event');\r",
							"        pm.expect(item).to.have.property('author');\r",
							"        pm.expect(item).to.have.property('createdOn');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    response.forEach(item => {\r",
							"        pm.expect(item.id).to.not.be.null;\r",
							"        pm.expect(item.text).to.be.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ должен содержать массив с уникальными комментариями\", function () {\r",
							"    pm.expect(response).to.be.an('array');\r",
							"    const ids = response.map(item => item.id);\r",
							"    pm.expect(ids).to.have.lengthOf(new Set(ids).size);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        let event1 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event1 = await api.publishEvent(event1.id);\r",
							"        pm.collectionVariables.set(\"eid1\", event1.id)\r",
							"       \r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"        const comment1 = await api.addComment(user.id, event1.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid1\", comment1.id)\r",
							"        const comment2 = await api.addComment(user.id, event1.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid2\", comment2.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments?commentId={{cid}},{{cid1}},{{cid2}}&from=0&size=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "commentId",
							"value": "{{cid}},{{cid1}},{{cid2}}"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments by admin without params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Комментарии должены содержать поля: id, text, author, createdOn\", function () {\r",
							"    target.forEach(item => {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('text');\r",
							"        pm.expect(item).to.have.property('event');\r",
							"        pm.expect(item).to.have.property('author');\r",
							"        pm.expect(item).to.have.property('createdOn');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ должен содержать массив с уникальными комментариями\", function () {\r",
							"    pm.expect(target).to.be.an('array');\r",
							"    const ids = target.map(item => item.id);\r",
							"    pm.expect(ids).to.have.lengthOf(new Set(ids).size);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid1\", user1.id)\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid2\", user2.id)\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        let event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
							"        event1 = await api.publishEvent(event1.id);\r",
							"        pm.collectionVariables.set(\"eid1\", event1.id)\r",
							"        let event2 = await api.addEvent(user2.id, rnd.getEvent(category.id));\r",
							"        event2 = await api.publishEvent(event2.id);\r",
							"        pm.collectionVariables.set(\"eid2\", event2.id)\r",
							"        \r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"        const comment1 = await api.addComment(user1.id, event1.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid1\", comment1.id)\r",
							"        const comment2 = await api.addComment(user2.id, event2.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid2\", comment2.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete comment by user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"let source = pm.collectionVariables.get('response');\r",
							"\r",
							"pm.test(\"До удаления комментарий должен сувществовать\", function () {\r",
							"    pm.expect(source).not.to.be.null;\r",
							"});\r",
							"\r",
							"let body\r",
							"const eid = pm.collectionVariables.get('eid');\r",
							"const req = {\r",
							"    url: \"http://localhost:8080/event/\" + eid + \"/comments?from=0&size=10\",\r",
							"    method: \"GET\",\r",
							"    body: body == null ? \"\" : JSON.stringify(body),\r",
							"    header: { \"Content-Type\": \"application/json\" },\r",
							"};\r",
							"pm.sendRequest(req, (error, response) => {\r",
							"    pm.test(\"Комментарий должен быть удален после выполнения запроса\", function(){\r",
							"        response.json().forEach(element => {\r",
							"            if(element.id == pm.collectionVariables.get('cid')){\r",
							"                throw new Error(\"Комментарий все еще существует\");\r",
							"            }\r",
							"        })\r",
							"    });\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"        const foundComment = await api.findComment(comment.id);\r",
							"        pm.collectionVariables.set('response', foundComment);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{uid}}/comments/{{cid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid}}",
						"comments",
						"{{cid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail delete comment when user not owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"let source = pm.collectionVariables.get('response');\r",
							"\r",
							"pm.test(\"До попытки удаления комментарий должен сувществовать\", function () {\r",
							"    pm.expect(source).not.to.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid1\", user1.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"        const foundComment = await api.findComment(comment.id);\r",
							"        pm.collectionVariables.set('response', foundComment);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{cid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{uid1}}",
						"comments",
						"{{cid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete comment by admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"let source = pm.collectionVariables.get('response');\r",
							"\r",
							"pm.test(\"До удаления комментарий должен сувществовать\", function () {\r",
							"    pm.expect(source).not.to.be.null;\r",
							"});\r",
							"\r",
							"let body\r",
							"const eid = pm.collectionVariables.get('eid');\r",
							"const req = {\r",
							"    url: \"http://localhost:8080/event/\" + eid + \"/comments?from=0&size=10\",\r",
							"    method: \"GET\",\r",
							"    body: body == null ? \"\" : JSON.stringify(body),\r",
							"    header: { \"Content-Type\": \"application/json\" },\r",
							"};\r",
							"pm.sendRequest(req, (error, response) => {\r",
							"    pm.test(\"Комментарий должен быть удален после выполнения запроса\", function(){\r",
							"        response.json().forEach(element => {\r",
							"            if(element.id == pm.collectionVariables.get('cid')){\r",
							"                throw new Error(\"Комментарий все еще существует\");\r",
							"            }\r",
							"        })\r",
							"    });\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"        const foundComment = await api.findComment(comment.id);\r",
							"        pm.collectionVariables.set('response', foundComment);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments?commentId={{cid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "commentId",
							"value": "{{cid}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"",
					"    async addComment(userId, eventId, comment, verbose=null) {",
					"        return this.post('/users/' + userId + '/comments?eventId=' + eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"    ",
					"    async updateComment(userId, commentId, comment, verbose=null) {",
					"        return this.update('users/' + userId + '/comments/' + commentId, comment, \"Ошибка при обновлении нового комментария: \", verbose);",
					"    }",
					"",
					"    async findComment(userId, verbose=null) {",
					"        return this.get('users/' + userId + '/comments', comment, \"Ошибка при получении комментариев: \", verbose);",
					"    }",
					"    ",
					"    ",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"        };",
					"    }",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "statUrl",
			"value": "http://localhost:9090",
			"type": "string"
		},
		{
			"key": "catname",
			"value": "",
			"type": "string"
		},
		{
			"key": "catid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "compid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "mail",
			"value": "",
			"type": "string"
		},
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "newDataToSet",
			"value": "",
			"type": "string"
		},
		{
			"key": "reqid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "request_body",
			"value": "",
			"type": "string"
		},
		{
			"key": "response",
			"value": "",
			"type": "string"
		},
		{
			"key": "toCheck",
			"value": "",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "uid1",
			"value": "",
			"type": "string"
		},
		{
			"key": "usersCount",
			"value": "1",
			"type": "string"
		},
		{
			"key": "cid2",
			"value": "",
			"type": "string"
		},
		{
			"key": "cid",
			"value": ""
		},
		{
			"key": "cid1",
			"value": "",
			"type": "string"
		},
		{
			"key": "uid2",
			"value": "",
			"type": "string"
		},
		{
			"key": "eid1",
			"value": "",
			"type": "string"
		},
		{
			"key": "eid2",
			"value": "",
			"type": "string"
		}
	]
}